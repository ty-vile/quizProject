// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@unique([provider,providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@index([userId], name: "userId")
  @@index([userId])
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  quizs Quiz[]
  takes Take[]
  followers UserFollow[]
}

model UserFollow {
  id String @id @default(cuid())
  userId String
  followingId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([followingId])
}

model Quiz {
  id String @id @default(cuid())
  title String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category String
  questions Question[]
  takes Take[]
  score Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Question {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizId String
  question String
  type String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers Answer[]
  takeAnswers TakeAnswer[]
  @@index([quizId])
}

model Answer {
id String @id @default(cuid())
isCorrect Boolean
answer String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
quizId String
questionId String
takeAnswers TakeAnswer[]
question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
 @@index([quizId])
 @@index([questionId])
}


model TakeAnswer {
  id String @id @default(cuid())
  takeId String
  questionId String
  answerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer String
  correctAnswer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  take Take @relation(fields: [takeId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  @@index([takeId])
  @@index([questionId])
  @@index([answerId])
}

model Take {
  id String @id @default(cuid())
  userId String
  quizId String
  status String
  score Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  takeAnswers TakeAnswer[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  @@index([quizId])
  @@index([userId])
}